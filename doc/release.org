#+TITLE: Release Process for GNU Guix
#+AUTHOR: Ludovic Courtès
#+STARTUP: content hidestars
#+EMAIL: ludo@gnu.org

This document describes the typical release process for Guix.

* Update NEWS

** Update the list fixed bugs, with bugs.gnu.org URL

Run "git log" and search for "^Fixes".

** Update the list of new packages

Typically, you already have a list of package/version pairs from the
previous version.  And then you build one for the new version:

#+BEGIN_SRC scheme
  (use-modules (gnu) (guix)
               (srfi srfi-1))

  (define old
    ;; Get the list of packages of the previous release.
    (call-with-input-file "packages-0.11.0.txt"
      read))

  ;; Don't browse things listed in the user's $GUIX_PACKAGE_PATH.  Here we
  ;; assume that the last item in (%package-module-path) is the distro
  ;; directory.
  (%package-module-path (list (last (%package-module-path))))

  (define new
    ;; List of package/version pairs for the new Guix version.
    (fold-packages (lambda (p r)
                     (alist-cons (package-name p) (package-version p)
                                 r))
                   '()))

#+END_SRC

From there, compute the list of packages that were added:

#+BEGIN_SRC scheme
  (define added
    ;; List of packages present in NEW and not in OLD.
    (lset-difference string=? (map car new) (map car old)))

#+END_SRC

Make that list "camera-ready":

#+BEGIN_SRC scheme
  (string-join (sort added string<?) ", ")
#+END_SRC

... and paste it into 'NEWS'.

** Update the list of upgraded packages

Same idea: identify what's been updated:

#+BEGIN_SRC scheme
  (use-modules (ice-9 match))

  (define upgraded
    ;; List of package/version pairs for packages that were upgraded.
    (filter-map (match-lambda
                 ((package . new-version)
                  (match (assoc package old)
                    ((_ . old-version)
                     (and (version>? new-version old-version)
                          (cons package new-version)))
                    (_ #f))))
                new))
#+END_SRC

Make that list "camera-ready":

#+BEGIN_SRC scheme
  (string-join (sort (map (match-lambda
                           ((package . version)
                            (string-append package "-" version)))
                          upgraded)
                     string<?)
               ", ")
#+END_SRC

... and paste it into NEWS.

** Save the current list of packages for later

#+BEGIN_SRC scheme
  (use-modules (ice-9 pretty-print))

  (call-with-output-file "packages-0.12.0.txt"
    (lambda (port)
      (pretty-print new port)))

#+END_SRC

* Prepare & upload tarball

** Create branch 'version-X.Y.Z'

  $ git branch version-X.Y.Z
  $ git checkout version-X.Y.Z

** Add a Git tag

Create a signed Git tag, like this:

  $ git tag -s -u MY-KEY -m "GNU Guix X.Y." vX.Y
  $ autoreconf  # to update $(PACKAGE_VERSION)

The tag must be `vX.Y'.  For the sake of consistency, always use
"GNU Guix X.Y." as the tag comment.

** Run “make release”

This will automatically build:

  1. The source tarball, with “make distcheck” (commit V).
  2. The binary tarballs for each architecture, after first updating the
     ‘guix’ package in (gnu packages package-management) so that it uses
     the commit above (we’re now at V + 1).
  3. The GuixSD installation images, after first updating the ‘guix’
     package again to refer to the 2nd commit above (we’re now at V + 2).

All these files will end up in a ‘release-X.Y.Z’ sub-directory.

Needless to say, this operation takes some time.  Since this is
committing on your behalf, it will contact your gpg-agent to sign
commits, so you need to keep an eye on it.

Steps #2 and #3 require you to have [[info:guix#Daemon%20Offload%20Setup][offloading]] set up so you can build
for all the supported architectures.  For instance, if you’re running
this on an x86_64 machine, you should have an “armhf-linux” machine in
/etc/guix/machines.scm.

** Push the branch

If “make release” succeeded, push the branch and tag:

  $ git push

** Upload all the files

  $ ./build-aux/gnupload --to alpha.gnu.org:guix \
       release-X.Y.Z/*.[xlg]z

You'll get an email soon after when the upload is complete.

Your GPG public key must be registered for this to work (info
"(maintain) Automated Upload Registration").

Make sure to publish your public key on public OpenPGP servers
(keys.gnupg.net, pgp.mit.edu, etc.), so that people can actually use it
to check the authenticity and integrity of the tarball.

** Add a Hydra jobset for branch 'version-X.Y.Z'

This jobset will have to be kept until the next release, so that
substitutes remain available.

* Announcements

First, re-read the GNU Maintainers Guide [[info:maintain.info#Announcements][on this topic]].

** Update web pages

  - Update the ‘latest-guix-version’ value in (www shared), in the
    guix-artwork.git repository.
  - Regenerate the web site by using (export-web-site
    "/path/to/cvs/checkout") from the (www) module, and then “cvs ci”
    the result so that gnu.org is actually updated.

** Update the on-line copy of the manual

Use Gnulib's `gendocs' script, add to the manual/ directory of the web site.

  $ cd doc
  $ ~/src/gnulib/build-aux/gendocs.sh guix "GNU Guix X.Y Reference Manual"

** Prepare the email announcement

  $ build-aux/announce-gen --release-type=alpha --package-name=guix \
      --previous-version=A.B --current-version=X.Y \
      --gpg-key-id=MY-KEY --url-directory=ftp://alpha.gnu.org/gnu/guix \
      --bootstrap-tools=autoconf,automake,makeinfo,help2man

The subject must be "GNU Guix X.Y released".  The text should remain
formal and impersonal (it is sent on behalf of the Guix and GNU
projects.)  It must include a description of what Guix is (not everyone
reading info-gnu may know about it.)  Use the text of previous
announcements as a template.

Below the initial boilerplate that describes Guile should come the
output of `announce-gen', and then the `NEWS' file excerpt in its
entirety (don't call it a change log since that's not what it is.)

** Send the email announcement

Send to these places, preferably in the morning on a working day (UTC):

  - guix-devel@gnu.org, help-guix@gnu.org
  - gnu-system-discuss@gnu.org, info-gnu@gnu.org
  - guile-user@gnu.org, nix-dev@lists.science.uu.nl
  - comp.lang.scheme
  - comp.lang.functional

** Post a news item on [[http://sv.gnu.org/p/guile/][Savannah]]

The news will end up on planet.gnu.org and [[http://scheme.dk/planet/][Planet Scheme]].  The text can
be shorter and more informal, with a link to the email announcement for
details.  Add the [[./announcements/savannah/about.txt]["About" footer]] at the bottom of the announcement.



Copyright © 2014 Ludovic Courtès <ludo@gnu.org>
Copyright © 2011, 2012, 2013 Free Software Foundation, Inc.

  Copying and distribution of this file, with or without modification,
  are permitted in any medium without royalty provided the copyright
  notice and this notice are preserved.
